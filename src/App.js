import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';
import { Search, TrendingUp, Calculator, Zap, Award, AlertCircle, CheckCircle, Download, FileText, Share2, RefreshCw, Database, Plus, Minus, Eye, Wifi, WifiOff } from 'lucide-react';
import mfApi from './api/mfApi';
import { transformFundData, groupFundsByHouse, calculateFundMetrics } from './utils/dataTransformer';

// Mock fund data with realistic values
const FUND_DATA = {
  'HDFC': [
    {
      id: 'hdfc-midcap-growth',
      name: 'HDFC Mid-Cap Opportunities Fund',
      category: 'Mid Cap',
      directER: 1.05,
      regularER: 2.25,
      cagr5y: 14.2,
      aum: 15420,
      risk: 'High'
    },
    {
      id: 'hdfc-large-cap',
      name: 'HDFC Top 100 Fund',
      category: 'Large Cap',
      directER: 0.95,
      regularER: 2.15,
      cagr5y: 11.8,
      aum: 25680,
      risk: 'Moderate'
    },
    {
      id: 'hdfc-flexi-cap',
      name: 'HDFC Flexi Cap Fund',
      category: 'Flexi Cap',
      directER: 1.15,
      regularER: 2.35,
      cagr5y: 13.5,
      aum: 18990,
      risk: 'High'
    }
  ],
  'SBI': [
    {
      id: 'sbi-small-cap',
      name: 'SBI Small Cap Fund',
      category: 'Small Cap',
      directER: 1.25,
      regularER: 2.75,
      cagr5y: 16.8,
      aum: 12450,
      risk: 'Very High'
    },
    {
      id: 'sbi-bluechip',
      name: 'SBI Blue Chip Fund',
      category: 'Large Cap',
      directER: 0.85,
      regularER: 2.05,
      cagr5y: 10.9,
      aum: 32100,
      risk: 'Moderate'
    }
  ],
  'ICICI Prudential': [
    {
      id: 'icici-value-discovery',
      name: 'ICICI Prudential Value Discovery Fund',
      category: 'Large & Mid Cap',
      directER: 1.35,
      regularER: 2.55,
      cagr5y: 15.1,
      aum: 8920,
      risk: 'High'
    },
    {
      id: 'icici-focused-bluechip',
      name: 'ICICI Prudential Focused Bluechip Fund',
      category: 'Large Cap',
      directER: 1.05,
      regularER: 2.25,
      cagr5y: 12.4,
      aum: 19870,
      risk: 'Moderate'
    }
  ],
  'Axis': [
    {
      id: 'axis-small-cap',
      name: 'Axis Small Cap Fund',
      category: 'Small Cap',
      directER: 1.45,
      regularER: 2.65,
      cagr5y: 17.2,
      aum: 7650,
      risk: 'Very High'
    },
    {
      id: 'axis-bluechip',
      name: 'Axis Bluechip Fund',
      category: 'Large Cap',
      directER: 0.95,
      regularER: 2.15,
      cagr5y: 11.6,
      aum: 28990,
      risk: 'Moderate'
    }
  ]
};

// In-memory cache for calculations and fund data
const cache = new Map();

// API Configuration - Mock endpoints for demonstration
const API_CONFIG = {
  baseUrl: 'https://api.mfapi.in',
  endpoints: {
    fundList: '/mf',
    fundDetails: '/mf/{scheme_code}',
    nav: '/mf/{scheme_code}/latest'
  }
};

// Mock API service for demonstration
const ApiService = {
  async fetchFundList() {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Return mock data - in real app, this would fetch from actual API
    return Promise.resolve({
      data: Object.entries(FUND_DATA).flatMap(([house, funds]) =>
        funds.map(fund => ({
          ...fund,
          fundHouse: house,
          schemeCode: Math.random().toString(36).substr(2, 9)
        }))
      ),
      lastUpdated: new Date().toISOString()
    });
  },

  async fetchFundDetails(schemeCode) {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Mock response
    return Promise.resolve({
      data: {
        schemeCode,
        nav: (Math.random() * 100 + 50).toFixed(2),
        date: new Date().toISOString().split('T')[0]
      }
    });
  }
};

// Export utilities
const ExportService = {
  exportToPDF: (data, fundName, calculations) => {
    // Mock PDF export - in real app would use libraries like jsPDF
    const content = `
Investment Analysis Report
=======================
Fund: ${fundName}
Generated: ${new Date().toLocaleDateString()}

Investment Details:
- Monthly SIP: ₹${data.sipAmount.toLocaleString()}
- Investment Period: ${data.years} years
- Total Investment: ₹${calculations.totalInvested.toLocaleString()}

Results:
- Direct Plan Value: ₹${calculations.directValue.toLocaleString()}
- Regular Plan Value: ₹${calculations.regularValue.toLocaleString()}
- Extra Savings: ₹${(calculations.directValue - calculations.regularValue).toLocaleString()}

This report was generated by MF Plan Comparator
    `.trim();
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `MF_Analysis_${fundName.replace(/\s+/g, '_')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  },

  exportToCSV: (projectionData, fundName) => {
    const headers = ['Year', 'Direct Plan (₹)', 'Regular Plan (₹)', 'Savings (₹)'];
    const csvData = [
      headers.join(','),
      ...projectionData.map(row => 
        [row.year, row.direct, row.regular, row.difference].join(',')
      )
    ].join('\n');

    const blob = new Blob([csvData], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${fundName.replace(/\s+/g, '_')}_Projection.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  },

  shareResults: (fundName, savings) => {
    if (navigator.share) {
      navigator.share({
        title: 'Mutual Fund Analysis Results',
        text: `I could save ₹${savings.toLocaleString()} by choosing Direct plan for ${fundName}!`,
        url: window.location.href
      });
    } else {
      // Fallback for browsers without Web Share API
      const text = `I could save ₹${savings.toLocaleString()} by choosing Direct plan for ${fundName}! Check it out: ${window.location.href}`;
      navigator.clipboard.writeText(text).then(() => {
        alert('Results copied to clipboard!');
      });
    }
  }
};

// Utility functions
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('en-IN', {
    style: 'currency',
    currency: 'INR',
    maximumFractionDigits: 0
  }).format(amount);
};

const calculateSIP = (monthlyAmount, annualReturn, years, expenseRatio) => {
  const monthlyRate = (annualReturn - expenseRatio) / 100 / 12;
  const totalMonths = years * 12;
  
  if (monthlyRate === 0) return monthlyAmount * totalMonths;
  
  const futureValue = monthlyAmount * (
    (Math.pow(1 + monthlyRate, totalMonths) - 1) / monthlyRate
  ) * (1 + monthlyRate);
  
  return futureValue;
};

const generateProjectionData = (monthlyAmount, annualReturn, years, directER, regularER) => {
  const data = [];
  for (let year = 1; year <= years; year++) {
    const directValue = calculateSIP(monthlyAmount, annualReturn, year, directER);
    const regularValue = calculateSIP(monthlyAmount, annualReturn, year, regularER);
    data.push({
      year,
      direct: Math.round(directValue),
      regular: Math.round(regularValue),
      difference: Math.round(directValue - regularValue)
    });
  }
  return data;
};

const getFundTags = (fund) => {
  const tags = [];
  if (fund.directER < 1.0) tags.push({ label: 'Low Expense', color: 'bg-green-100 text-green-800' });
  if (fund.cagr5y > 15) tags.push({ label: 'High Returns', color: 'bg-blue-100 text-blue-800' });
  if (fund.aum > 20000) tags.push({ label: 'Large Fund', color: 'bg-purple-100 text-purple-800' });
  if (fund.directER - fund.regularER > 1.5) tags.push({ label: 'High Direct Savings', color: 'bg-orange-100 text-orange-800' });
  return tags;
};

// Custom hooks
const useDebounce = (value, delay) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  
  useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(value), delay);
    return () => clearTimeout(handler);
  }, [value, delay]);
  
  return debouncedValue;
};

// Components
const LoadingSpinner = ({ size = 'md' }) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8',
    lg: 'w-12 h-12'
  };

  return (
    <div className={`${sizeClasses[size]} animate-spin`}>
      <RefreshCw className="w-full h-full text-blue-500" />
    </div>
  );
};

const ComparisonTable = ({ funds, selectedFunds, onFundToggle, sipAmount, years }) => {
  if (!funds || funds.length === 0) return null;

  return (
    <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-200">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-bold text-gray-900 flex items-center gap-2">
          <Eye className="w-5 h-5 text-blue-500" />
          Fund Comparison Table
        </h3>
        <span className="text-sm text-gray-500">
          {selectedFunds.length} of {Math.min(funds.length, 5)} funds selected
        </span>
      </div>

      <div className="overflow-x-auto">
        <table className="w-full text-sm">
          <thead>
            <tr className="border-b border-gray-200">
              <th className="text-left py-3 px-2 font-semibold text-gray-700">Fund</th>
              <th className="text-center py-3 px-2 font-semibold text-gray-700">Direct ER</th>
              <th className="text-center py-3 px-2 font-semibold text-gray-700">Regular ER</th>
              <th className="text-center py-3 px-2 font-semibold text-gray-700">5Y CAGR</th>
              <th className="text-center py-3 px-2 font-semibold text-gray-700">Direct Value</th>
              <th className="text-center py-3 px-2 font-semibold text-gray-700">Savings</th>
              <th className="text-center py-3 px-2 font-semibold text-gray-700">Action</th>
            </tr>
          </thead>
          <tbody>
            {funds.slice(0, 5).map(fund => {
              const isSelected = selectedFunds.includes(fund.id);
              const directValue = calculateSIP(sipAmount, fund.cagr5y, years, fund.directER);
              const regularValue = calculateSIP(sipAmount, fund.cagr5y, years, fund.regularER);
              const savings = directValue - regularValue;

              return (
                <tr 
                  key={fund.id} 
                  className={`border-b border-gray-100 hover:bg-gray-50 transition-colors ${
                    isSelected ? 'bg-blue-50' : ''
                  }`}
                >
                  <td className="py-3 px-2">
                    <div>
                      <p className="font-medium text-gray-900 text-xs">{fund.name}</p>
                      <p className="text-xs text-gray-500">{fund.category}</p>
                    </div>
                  </td>
                  <td className="text-center py-3 px-2 text-green-600 font-medium">
                    {fund.directER}%
                  </td>
                  <td className="text-center py-3 px-2 text-orange-600 font-medium">
                    {fund.regularER}%
                  </td>
                  <td className="text-center py-3 px-2 font-medium">
                    {fund.cagr5y}%
                  </td>
                  <td className="text-center py-3 px-2 font-medium text-green-600">
                    ₹{(directValue / 100000).toFixed(1)}L
                  </td>
                  <td className="text-center py-3 px-2 font-bold text-blue-600">
                    ₹{(savings / 1000).toFixed(0)}k
                  </td>
                  <td className="text-center py-3 px-2">
                    <button
                      onClick={() => onFundToggle(fund.id)}
                      className={`p-1 rounded-full transition-colors ${
                        isSelected 
                          ? 'bg-red-100 text-red-600 hover:bg-red-200' 
                          : 'bg-blue-100 text-blue-600 hover:bg-blue-200'
                      }`}
                      disabled={!isSelected && selectedFunds.length >= 3}
                    >
                      {isSelected ? <Minus className="w-4 h-4" /> : <Plus className="w-4 h-4" />}
                    </button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      <p className="text-xs text-gray-500 mt-4">
        * Calculations based on SIP of ₹{sipAmount.toLocaleString()} for {years} years
      </p>
    </div>
  );
};

const ExportPanel = ({ results, selectedFund, projectionData, sipAmount, years }) => {
  if (!results || !selectedFund) return null;

  const savings = results.directValue - results.regularValue;

  return (
    <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-200">
      <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center gap-2">
        <Download className="w-5 h-5 text-blue-500" />
        Export & Share
      </h3>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <button
          onClick={() => ExportService.exportToPDF(
            { sipAmount, years }, 
            selectedFund.name, 
            results
          )}
          className="flex items-center gap-2 p-3 border-2 border-gray-200 rounded-xl hover:border-blue-300 hover:bg-blue-50 transition-colors"
        >
          <FileText className="w-5 h-5 text-gray-600" />
          <div className="text-left">
            <p className="font-medium text-gray-900 text-sm">Export Report</p>
            <p className="text-xs text-gray-500">Download as TXT</p>
          </div>
        </button>

        <button
          onClick={() => ExportService.exportToCSV(projectionData, selectedFund.name)}
          className="flex items-center gap-2 p-3 border-2 border-gray-200 rounded-xl hover:border-green-300 hover:bg-green-50 transition-colors"
        >
          <Database className="w-5 h-5 text-gray-600" />
          <div className="text-left">
            <p className="font-medium text-gray-900 text-sm">Export Data</p>
            <p className="text-xs text-gray-500">Download CSV</p>
          </div>
        </button>

        <button
          onClick={() => ExportService.shareResults(selectedFund.name, savings)}
          className="flex items-center gap-2 p-3 border-2 border-gray-200 rounded-xl hover:border-purple-300 hover:bg-purple-50 transition-colors"
        >
          <Share2 className="w-5 h-5 text-gray-600" />
          <div className="text-left">
            <p className="font-medium text-gray-900 text-sm">Share Results</p>
            <p className="text-xs text-gray-500">Copy or Share</p>
          </div>
        </button>
      </div>
    </div>
  );
};

const FundSelector = ({ fundHouses, selectedFundHouse, selectedFund, onFundHouseChange, onFundChange, isLoading, onRefreshData, fundData }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const debouncedSearch = useDebounce(searchTerm, 300);
  
  const filteredFunds = useMemo(() => {
    if (!selectedFundHouse) return [];
    const funds = fundData[selectedFundHouse] || [];
    if (!debouncedSearch) return funds;
    return funds.filter(fund => 
      fund.name.toLowerCase().includes(debouncedSearch.toLowerCase())
    );
  }, [selectedFundHouse, debouncedSearch, fundData]);

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <label className="block text-sm font-semibold text-gray-700">Fund House</label>
        <button
          onClick={onRefreshData}
          disabled={isLoading}
          className="flex items-center gap-1 text-xs text-blue-600 hover:text-blue-800 disabled:opacity-50"
        >
          {isLoading ? (
            <LoadingSpinner size="sm" />
          ) : (
            <RefreshCw className="w-3 h-3" />
          )}
          Refresh
        </button>
      </div>
      
      <div>
        <select 
          value={selectedFundHouse}
          onChange={(e) => onFundHouseChange(e.target.value)}
          disabled={isLoading}
          className="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white shadow-sm disabled:opacity-50"
        >
          <option value="">Select Fund House</option>
          {fundHouses.map(house => (
            <option key={house} value={house}>{house}</option>
          ))}
        </select>
      </div>

      {selectedFundHouse && (
        <div>
          <label className="block text-sm font-semibold text-gray-700 mb-2">Search & Select Fund</label>
          <div className="relative mb-3">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              placeholder="Search funds..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              disabled={isLoading}
              className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 disabled:opacity-50"
            />
          </div>
          
          {isLoading ? (
            <div className="flex items-center justify-center py-8">
              <LoadingSpinner />
              <span className="ml-2 text-gray-600">Loading funds...</span>
            </div>
          ) : (
            <div className="space-y-2 max-h-60 overflow-y-auto">
              {filteredFunds.map(fund => {
                const tags = getFundTags(fund);
                return (
                  <div
                    key={fund.id}
                    onClick={() => onFundChange(fund)}
                    className={`p-4 border rounded-xl cursor-pointer transition-all duration-200 hover:shadow-md ${
                      selectedFund?.id === fund.id 
                        ? 'border-blue-500 bg-blue-50 shadow-md' 
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <h3 className="font-medium text-gray-900">{fund.name}</h3>
                        <p className="text-sm text-gray-600 mt-1">{fund.category} • AUM: ₹{fund.aum}cr</p>
                        <div className="flex flex-wrap gap-1 mt-2">
                          {tags.map((tag, idx) => (
                            <span key={idx} className={`px-2 py-1 rounded-full text-xs font-medium ${tag.color}`}>
                              {tag.label}
                            </span>
                          ))}
                        </div>
                      </div>
                      <div className="text-right ml-4">
                        <div className="text-sm font-semibold text-green-600">{fund.cagr5y}%</div>
                        <div className="text-xs text-gray-500">5Y CAGR</div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

const SIPInputs = ({ sipAmount, years, onSipChange, onYearsChange }) => {
  return (
    <div className="space-y-4">
      <div>
        <label className="block text-sm font-semibold text-gray-700 mb-2">Monthly SIP Amount (₹)</label>
        <input
          type="number"
          value={sipAmount}
          onChange={(e) => onSipChange(Number(e.target.value))}
          placeholder="e.g., 10000"
          min="500"
          step="500"
          className="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
        />
      </div>
      
      <div>
        <label className="block text-sm font-semibold text-gray-700 mb-2">Investment Period (Years)</label>
        <input
          type="number"
          value={years}
          onChange={(e) => onYearsChange(Number(e.target.value))}
          placeholder="e.g., 10"
          min="1"
          max="30"
          className="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
        />
      </div>
    </div>
  );
};

const ResultsCard = ({ results, fund }) => {
  if (!results || !fund) return null;

  const savingsDifference = results.directValue - results.regularValue;
  const savingsPercentage = ((savingsDifference / results.regularValue) * 100).toFixed(1);

  return (
    <div className="bg-gradient-to-br from-blue-50 to-indigo-100 rounded-2xl p-6 border border-blue-200">
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 bg-blue-500 rounded-lg">
          <TrendingUp className="w-6 h-6 text-white" />
        </div>
        <div>
          <h2 className="text-xl font-bold text-gray-900">Investment Comparison</h2>
          <p className="text-sm text-gray-600">{fund.name}</p>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div className="bg-white rounded-xl p-4 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Direct Plan</p>
              <p className="text-2xl font-bold text-green-600">{formatCurrency(results.directValue)}</p>
            </div>
            <CheckCircle className="w-8 h-8 text-green-500" />
          </div>
          <p className="text-xs text-gray-500 mt-1">Expense Ratio: {fund.directER}%</p>
        </div>

        <div className="bg-white rounded-xl p-4 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Regular Plan</p>
              <p className="text-2xl font-bold text-orange-600">{formatCurrency(results.regularValue)}</p>
            </div>
            <AlertCircle className="w-8 h-8 text-orange-500" />
          </div>
          <p className="text-xs text-gray-500 mt-1">Expense Ratio: {fund.regularER}%</p>
        </div>
      </div>

      <div className="bg-gradient-to-r from-green-500 to-green-600 rounded-xl p-4 text-white">
        <div className="flex items-center gap-3">
          <Award className="w-6 h-6" />
          <div>
            <p className="text-sm opacity-90">Smart Summary</p>
            <p className="text-lg font-bold">
              💡 You'll earn {formatCurrency(savingsDifference)} more ({savingsPercentage}% extra) by choosing the Direct Plan!
            </p>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-3 gap-4 mt-6 text-center">
        <div>
          <p className="text-sm text-gray-600">Total Investment</p>
          <p className="font-bold text-gray-900">{formatCurrency(results.totalInvested)}</p>
        </div>
        <div>
          <p className="text-sm text-gray-600">Expected Return</p>
          <p className="font-bold text-green-600">{fund.cagr5y}% CAGR</p>
        </div>
        <div>
          <p className="text-sm text-gray-600">Total Gain</p>
          <p className="font-bold text-blue-600">{formatCurrency(results.directValue - results.totalInvested)}</p>
        </div>
      </div>
    </div>
  );
};

const ComparisonChart = ({ projectionData, years }) => {
  if (!projectionData || projectionData.length === 0) return null;

  return (
    <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-200">
      <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center gap-2">
        <Calculator className="w-5 h-5 text-blue-500" />
        Wealth Projection Over {years} Years
      </h3>
      
      <div className="h-80">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={projectionData}>
            <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
            <XAxis 
              dataKey="year" 
              stroke="#6b7280"
              tick={{ fontSize: 12 }}
            />
            <YAxis 
              stroke="#6b7280"
              tick={{ fontSize: 12 }}
              tickFormatter={(value) => `₹${(value / 100000).toFixed(0)}L`}
            />
            <Tooltip 
              formatter={(value, name) => [formatCurrency(value), name === 'direct' ? 'Direct Plan' : 'Regular Plan']}
              labelFormatter={(label) => `Year ${label}`}
              contentStyle={{ 
                backgroundColor: 'white', 
                border: '1px solid #e5e7eb', 
                borderRadius: '8px',
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
              }}
            />
            <Line 
              type="monotone" 
              dataKey="direct" 
              stroke="#10b981" 
              strokeWidth={3}
              dot={{ fill: '#10b981', strokeWidth: 2, r: 4 }}
              activeDot={{ r: 6, stroke: '#10b981', strokeWidth: 2 }}
            />
            <Line 
              type="monotone" 
              dataKey="regular" 
              stroke="#f59e0b" 
              strokeWidth={3}
              dot={{ fill: '#f59e0b', strokeWidth: 2, r: 4 }}
              activeDot={{ r: 6, stroke: '#f59e0b', strokeWidth: 2 }}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
      
      <div className="flex justify-center gap-6 mt-4">
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-green-500 rounded-full"></div>
          <span className="text-sm text-gray-600">Direct Plan</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
          <span className="text-sm text-gray-600">Regular Plan</span>
        </div>
      </div>
    </div>
  );
};

const SavingsChart = ({ projectionData }) => {
  if (!projectionData || projectionData.length === 0) return null;

  return (
    <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-200">
      <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center gap-2">
        <Zap className="w-5 h-5 text-green-500" />
        Annual Savings with Direct Plan
      </h3>
      
      <div className="h-64">
        <ResponsiveContainer width="100%" height="100%">
          <BarChart data={projectionData}>
            <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
            <XAxis 
              dataKey="year" 
              stroke="#6b7280"
              tick={{ fontSize: 12 }}
            />
            <YAxis 
              stroke="#6b7280"
              tick={{ fontSize: 12 }}
              tickFormatter={(value) => `₹${(value / 1000).toFixed(0)}k`}
            />
            <Tooltip 
              formatter={(value) => [formatCurrency(value), 'Extra Savings']}
              labelFormatter={(label) => `Year ${label}`}
              contentStyle={{ 
                backgroundColor: 'white', 
                border: '1px solid #e5e7eb', 
                borderRadius: '8px',
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
              }}
            />
            <Bar 
              dataKey="difference" 
              fill="#10b981"
              radius={[4, 4, 0, 0]}
            />
          </BarChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

// Main App Component
const App = () => {
  const [selectedFundHouse, setSelectedFundHouse] = useState('');
  const [selectedFund, setSelectedFund] = useState(null);
  const [sipAmount, setSipAmount] = useState(10000);
  const [years, setYears] = useState(10);
  const [isLoading, setIsLoading] = useState(false);
  const [lastUpdated, setLastUpdated] = useState(null);
  const [selectedFundsForComparison, setSelectedFundsForComparison] = useState([]);
  const [showComparison, setShowComparison] = useState(false);
  const [apiStatus, setApiStatus] = useState('online');
  const [fundData, setFundData] = useState({});
  const [fundHouses, setFundHouses] = useState([]);

  // Get all funds for comparison table
  const allFunds = useMemo(() => {
    if (!selectedFundHouse) return [];
    return fundData[selectedFundHouse] || [];
  }, [selectedFundHouse, fundData]);

  // Real API Integration for refreshing data
  const refreshFundData = useCallback(async () => {
    setIsLoading(true);
    setApiStatus('loading');
    
    try {
      // Fetch real fund data
      const apiFunds = await mfApi.getAllFunds();
      const transformedFunds = transformFundData(apiFunds);
      const groupedFunds = groupFundsByHouse(transformedFunds);
      
      setFundData(groupedFunds);
      setFundHouses(Object.keys(groupedFunds).sort());
      setLastUpdated(new Date());
      setApiStatus('online');
      
    } catch (error) {
      console.error('Failed to fetch fund data:', error);
      setApiStatus('offline');
      // Fallback to mock data
      setFundData(FUND_DATA);
      setFundHouses(Object.keys(FUND_DATA));
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Initialize data on mount
  useEffect(() => {
    refreshFundData();
  }, [refreshFundData]);

  // Handle fund comparison toggle
  const handleFundToggle = useCallback((fundId) => {
    setSelectedFundsForComparison(prev => {
      if (prev.includes(fundId)) {
        return prev.filter(id => id !== fundId);
      } else if (prev.length < 3) {
        return [...prev, fundId];
      }
      return prev;
    });
  }, []);

  // Memoized calculations with caching
  const results = useMemo(() => {
    if (!selectedFund || !sipAmount || !years) return null;
    
    const cacheKey = `${selectedFund.id}-${sipAmount}-${years}`;
    if (cache.has(cacheKey)) {
      return cache.get(cacheKey);
    }

    const directValue = calculateSIP(sipAmount, selectedFund.cagr5y, years, selectedFund.directER);
    const regularValue = calculateSIP(sipAmount, selectedFund.cagr5y, years, selectedFund.regularER);
    const totalInvested = sipAmount * 12 * years;

    const result = {
      directValue: Math.round(directValue),
      regularValue: Math.round(regularValue),
      totalInvested
    };

    cache.set(cacheKey, result);
    return result;
  }, [selectedFund, sipAmount, years]);

  const projectionData = useMemo(() => {
    if (!selectedFund || !sipAmount || !years) return [];
    
    const cacheKey = `projection-${selectedFund.id}-${sipAmount}-${years}`;
    if (cache.has(cacheKey)) {
      return cache.get(cacheKey);
    }

    const data = generateProjectionData(
      sipAmount, 
      selectedFund.cagr5y, 
      years, 
      selectedFund.directER, 
      selectedFund.regularER
    );

    cache.set(cacheKey, data);
    return data;
  }, [selectedFund, sipAmount, years]);

  const handleFundHouseChange = useCallback((fundHouse) => {
    setSelectedFundHouse(fundHouse);
    setSelectedFund(null);
    setSelectedFundsForComparison([]);
  }, []);

  const handleFundChange = useCallback((fund) => {
    setSelectedFund(fund);
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            🎯 Mutual Fund Plan Comparator
          </h1>
          <p className="text-lg text-gray-600 mb-4">
            Compare Direct vs Regular plans and maximize your investment returns
          </p>
          
          <div className="flex items-center justify-center gap-4 mb-4">
            {lastUpdated && (
              <div className="inline-flex items-center gap-2 bg-green-100 text-green-800 px-4 py-2 rounded-full text-sm">
                <CheckCircle className="w-4 h-4" />
                Data updated: {lastUpdated.toLocaleDateString()} {lastUpdated.toLocaleTimeString()}
              </div>
            )}
            
            <div className={`inline-flex items-center gap-2 px-4 py-2 rounded-full text-sm ${
              apiStatus === 'online' ? 'bg-green-100 text-green-800' :
              apiStatus === 'loading' ? 'bg-yellow-100 text-yellow-800' :
              'bg-red-100 text-red-800'
            }`}>
              {apiStatus === 'online' ? <Wifi className="w-4 h-4" /> :
               apiStatus === 'loading' ? <RefreshCw className="w-4 h-4 animate-spin" /> :
               <WifiOff className="w-4 h-4" />}
              {apiStatus === 'online' ? 'Live Data' :
               apiStatus === 'loading' ? 'Loading...' :
               'Offline Mode'}
            </div>
          </div>
        </div>

        {/* Comparison Toggle */}
        {selectedFundHouse && allFunds.length > 1 && (
          <div className="mb-6 text-center">
            <button
              onClick={() => setShowComparison(!showComparison)}
              className="inline-flex items-center gap-2 bg-white border-2 border-blue-500 text-blue-600 px-6 py-3 rounded-xl font-semibold hover:bg-blue-50 transition-colors"
            >
              <Eye className="w-5 h-5" />
              {showComparison ? 'Hide' : 'Show'} Fund Comparison Table
            </button>
          </div>
        )}

        {/* Comparison Table */}
        {showComparison && selectedFundHouse && (
          <div className="mb-8">
            <ComparisonTable
              funds={allFunds}
              selectedFunds={selectedFundsForComparison}
              onFundToggle={handleFundToggle}
              sipAmount={sipAmount}
              years={years}
            />
          </div>
        )}

        {/* Main Content */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Input Section */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-200 sticky top-8">
              <h2 className="text-xl font-bold text-gray-900 mb-6 flex items-center gap-2">
                <Search className="w-5 h-5 text-blue-500" />
                Fund Selection
              </h2>
              
              <FundSelector
                fundHouses={fundHouses}
                selectedFundHouse={selectedFundHouse}
                selectedFund={selectedFund}
                onFundHouseChange={handleFundHouseChange}
                onFundChange={handleFundChange}
                isLoading={isLoading}
                onRefreshData={refreshFundData}
                fundData={fundData}
              />

              {selectedFund && (
                <div className="mt-6 pt-6 border-t border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Investment Details</h3>
                  <SIPInputs
                    sipAmount={sipAmount}
                    years={years}
                    onSipChange={setSipAmount}
                    onYearsChange={setYears}
                  />
                </div>
              )}
            </div>
          </div>

          {/* Results Section */}
          <div className="lg:col-span-2 space-y-6">
            {results && selectedFund ? (
              <>
                <ResultsCard results={results} fund={selectedFund} />
                <ExportPanel 
                  results={results} 
                  selectedFund={selectedFund} 
                  projectionData={projectionData}
                  sipAmount={sipAmount}
                  years={years}
                />
                <ComparisonChart projectionData={projectionData} years={years} />
                <SavingsChart projectionData={projectionData} />
              </>
            ) : (
              <div className="bg-white rounded-2xl p-12 text-center shadow-sm border border-gray-200">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Calculator className="w-8 h-8 text-gray-400" />
                </div>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">Ready to Compare?</h3>
                <p className="text-gray-600">
                  Select a fund house and fund to see detailed comparison between Direct and Regular plans
                </p>
              </div>
            )}
          </div>
        </div>

        {/* Call to Action */}
        {results && selectedFund && (
          <div className="mt-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-white text-center">
            <h3 className="text-2xl font-bold mb-4">Ready to Switch to Direct Plan?</h3>
            <p className="text-lg mb-6 opacity-90">
              Start investing in {selectedFund.name} (Direct) and save thousands in fees!
            </p>
            <div className="flex flex-wrap justify-center gap-4">
              <button className="bg-white text-blue-600 px-6 py-3 rounded-xl font-semibold hover:bg-gray-100 transition-colors">
                Start SIP Now
              </button>
              <button className="border-2 border-white text-white px-6 py-3 rounded-xl font-semibold hover:bg-white hover:text-blue-600 transition-colors">
                Learn More
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
